/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IShop,
  IShopInterface,
} from "../../../../dms-osx-artifacts/contracts/interfaces/IShop";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_purchaseId",
        type: "string",
      },
    ],
    name: "addProvidedAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_purchaseId",
        type: "string",
      },
    ],
    name: "addSettledAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_purchaseId",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_paymentId",
        type: "bytes32",
      },
    ],
    name: "addUsedAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
    ],
    name: "getSettlementAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
    ],
    name: "isAvailableId",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "nonceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
    ],
    name: "shopOf",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "shopId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "currency",
            type: "string",
          },
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "providedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "settledAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawnAmount",
            type: "uint256",
          },
          {
            internalType: "enum IShop.ShopStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "enum IShop.WithdrawStatus",
                name: "status",
                type: "uint8",
              },
            ],
            internalType: "struct IShop.WithdrawData",
            name: "withdrawData",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "itemIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "accountIndex",
            type: "uint256",
          },
        ],
        internalType: "struct IShop.ShopData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_purchaseId",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_paymentId",
        type: "bytes32",
      },
    ],
    name: "subUsedAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_shopId",
        type: "bytes32",
      },
    ],
    name: "withdrawableOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IShop__factory {
  static readonly abi = _abi;
  static createInterface(): IShopInterface {
    return new utils.Interface(_abi) as IShopInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IShop {
    return new Contract(address, _abi, signerOrProvider) as IShop;
  }
}
