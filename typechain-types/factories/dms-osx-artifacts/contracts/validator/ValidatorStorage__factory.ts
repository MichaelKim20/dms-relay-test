/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ValidatorStorage,
  ValidatorStorageInterface,
} from "../../../../dms-osx-artifacts/contracts/validator/ValidatorStorage";

const _abi = [
  {
    inputs: [],
    name: "MINIMUM_DEPOSIT_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060858061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636c622b2d14602d575b600080fd5b603d69152d02c7e14af680000081565b60405190815260200160405180910390f3fea2646970667358221220fd8f5cbf897602227febcd60ac7021a6042018033a3ea05540097c3222b32c1d64736f6c63430008020033";

type ValidatorStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValidatorStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValidatorStorage__factory extends ContractFactory {
  constructor(...args: ValidatorStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ValidatorStorage> {
    return super.deploy(overrides || {}) as Promise<ValidatorStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ValidatorStorage {
    return super.attach(address) as ValidatorStorage;
  }
  override connect(signer: Signer): ValidatorStorage__factory {
    return super.connect(signer) as ValidatorStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValidatorStorageInterface {
    return new utils.Interface(_abi) as ValidatorStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValidatorStorage {
    return new Contract(address, _abi, signerOrProvider) as ValidatorStorage;
  }
}
