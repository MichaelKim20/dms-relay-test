/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurrencyStorage,
  CurrencyStorageInterface,
} from "../../../../dms-osx-artifacts/contracts/currency/CurrencyStorage";

const _abi = [
  {
    inputs: [],
    name: "BASE_CURRENCY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MULTIPLE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NULL_CURRENCY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ef8061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635a9476421460415780637516a79e146059578063e19f4700146063575b600080fd5b60476069565b60405190815260200160405180910390f35b6047633b9aca0081565b60476089565b6040516020015b6040516020818303038152906040528051906020012081565b6040517f6b727700000000000000000000000000000000000000000000000000000000006020820152602301607056fea26469706673582212201dd9563dd10b30b907ce4db18dcff6c13dd55fcfb8bf21c0d40f1861f9b5958364736f6c63430008020033";

type CurrencyStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurrencyStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurrencyStorage__factory extends ContractFactory {
  constructor(...args: CurrencyStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurrencyStorage> {
    return super.deploy(overrides || {}) as Promise<CurrencyStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurrencyStorage {
    return super.attach(address) as CurrencyStorage;
  }
  override connect(signer: Signer): CurrencyStorage__factory {
    return super.connect(signer) as CurrencyStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurrencyStorageInterface {
    return new utils.Interface(_abi) as CurrencyStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurrencyStorage {
    return new Contract(address, _abi, signerOrProvider) as CurrencyStorage;
  }
}
