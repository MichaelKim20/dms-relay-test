/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LedgerStorage,
  LedgerStorageInterface,
} from "../../../../dms-osx-artifacts/contracts/ledger/LedgerStorage";

const _abi = [
  {
    inputs: [],
    name: "MAX_FEE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bridgeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "burnerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "consumerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foundationAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "providerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "settlementAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "transferAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "txFeeAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061021b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063a4ffeb5511610081578063dbc2d0421161005b578063dbc2d042146101ac578063e6293e23146101bf578063f444fdd8146101d2576100d4565b8063a4ffeb5514610168578063bc063e1a1461017b578063cc0e3f2c14610199576100d4565b8063706e5257116100b2578063706e52571461012f5780639d76ea5814610142578063a3c573eb14610155576100d4565b806319e36708146100d957806347b15a891461010957806365e17c9d1461011c575b600080fd5b6006546100ec906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600c546100ec906001600160a01b031681565b6008546100ec906001600160a01b031681565b600a546100ec906001600160a01b031681565b6010546100ec906001600160a01b031681565b600f546100ec906001600160a01b031681565b6009546100ec906001600160a01b031681565b6101846101f481565b60405163ffffffff9091168152602001610100565b6007546100ec906001600160a01b031681565b600b546100ec906001600160a01b031681565b600d546100ec906001600160a01b031681565b600e546100ec906001600160a01b03168156fea2646970667358221220ff1f87da0954819a56456b1d55977d686fa511e49ee3ed9208d937cd6113934964736f6c63430008020033";

type LedgerStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LedgerStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LedgerStorage__factory extends ContractFactory {
  constructor(...args: LedgerStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LedgerStorage> {
    return super.deploy(overrides || {}) as Promise<LedgerStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LedgerStorage {
    return super.attach(address) as LedgerStorage;
  }
  override connect(signer: Signer): LedgerStorage__factory {
    return super.connect(signer) as LedgerStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LedgerStorageInterface {
    return new utils.Interface(_abi) as LedgerStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LedgerStorage {
    return new Contract(address, _abi, signerOrProvider) as LedgerStorage;
  }
}
