/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Ledger {
  export type ManagementAddressesStruct = {
    foundation: PromiseOrValue<string>;
    settlement: PromiseOrValue<string>;
    fee: PromiseOrValue<string>;
    txFee: PromiseOrValue<string>;
  };

  export type ManagementAddressesStructOutput = [
    string,
    string,
    string,
    string
  ] & { foundation: string; settlement: string; fee: string; txFee: string };

  export type ContractAddressesStruct = {
    token: PromiseOrValue<string>;
    phoneLink: PromiseOrValue<string>;
    currencyRate: PromiseOrValue<string>;
    provider: PromiseOrValue<string>;
    consumer: PromiseOrValue<string>;
    exchanger: PromiseOrValue<string>;
    burner: PromiseOrValue<string>;
    transfer: PromiseOrValue<string>;
    bridge: PromiseOrValue<string>;
  };

  export type ContractAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    token: string;
    phoneLink: string;
    currencyRate: string;
    provider: string;
    consumer: string;
    exchanger: string;
    burner: string;
    transfer: string;
    bridge: string;
  };
}

export interface LedgerInterface extends utils.Interface {
  functions: {
    "MAX_FEE()": FunctionFragment;
    "addPointBalance(address,uint256)": FunctionFragment;
    "addTokenBalance(address,uint256)": FunctionFragment;
    "bridgeAddress()": FunctionFragment;
    "burnPoint(address,uint256)": FunctionFragment;
    "burnUnPayablePoint(bytes32,uint256)": FunctionFragment;
    "burnerAddress()": FunctionFragment;
    "changeToLoyaltyToken(address)": FunctionFragment;
    "changeToPayablePoint(bytes32,address)": FunctionFragment;
    "consumerAddress()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositLiquidity(bytes32,uint256,bytes)": FunctionFragment;
    "exchangerAddress()": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "foundationAccount()": FunctionFragment;
    "getFee()": FunctionFragment;
    "getFeeAccount()": FunctionFragment;
    "getFoundationAccount()": FunctionFragment;
    "getLiquidity(bytes32,address)": FunctionFragment;
    "getSettlementAccount()": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "getTxFeeAccount()": FunctionFragment;
    "increaseNonce(address)": FunctionFragment;
    "initialize((address,address,address,address),(address,address,address,address,address,address,address,address,address))": FunctionFragment;
    "loyaltyTypeOf(address)": FunctionFragment;
    "nonceOf(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pointBalanceOf(address)": FunctionFragment;
    "providePoint(address,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "provideToken(address,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "provideUnPayablePoint(bytes32,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "providerAddress()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removePhoneInfo(address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint32)": FunctionFragment;
    "settlementAccount()": FunctionFragment;
    "subPointBalance(address,uint256)": FunctionFragment;
    "subTokenBalance(address,uint256)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenBalanceOf(address)": FunctionFragment;
    "transferAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferToken(address,address,uint256)": FunctionFragment;
    "txFeeAccount()": FunctionFragment;
    "unPayablePointBalanceOf(bytes32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawLiquidity(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_FEE"
      | "addPointBalance"
      | "addTokenBalance"
      | "bridgeAddress"
      | "burnPoint"
      | "burnUnPayablePoint"
      | "burnerAddress"
      | "changeToLoyaltyToken"
      | "changeToPayablePoint"
      | "consumerAddress"
      | "deposit"
      | "depositLiquidity"
      | "exchangerAddress"
      | "feeAccount"
      | "foundationAccount"
      | "getFee"
      | "getFeeAccount"
      | "getFoundationAccount"
      | "getLiquidity"
      | "getSettlementAccount"
      | "getTokenAddress"
      | "getTxFeeAccount"
      | "increaseNonce"
      | "initialize"
      | "loyaltyTypeOf"
      | "nonceOf"
      | "owner"
      | "pointBalanceOf"
      | "providePoint"
      | "provideToken"
      | "provideUnPayablePoint"
      | "providerAddress"
      | "proxiableUUID"
      | "removePhoneInfo"
      | "renounceOwnership"
      | "setFee"
      | "settlementAccount"
      | "subPointBalance"
      | "subTokenBalance"
      | "tokenAddress"
      | "tokenBalanceOf"
      | "transferAddress"
      | "transferOwnership"
      | "transferToken"
      | "txFeeAccount"
      | "unPayablePointBalanceOf"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPointBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnPoint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnUnPayablePoint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeToLoyaltyToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeToPayablePoint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consumerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foundationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTxFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Ledger.ManagementAddressesStruct, Ledger.ContractAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyTypeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providePoint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provideToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provideUnPayablePoint",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "providerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePhoneInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subPointBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "txFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unPayablePointBalanceOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPointBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnUnPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeToLoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeToPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foundationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTxFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyTypeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideUnPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePhoneInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subPointBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "txFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPayablePointBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deposited(address,uint256,uint256,uint256)": EventFragment;
    "DepositedLiquidity(bytes32,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProvidedPoint(address,uint256,uint256,string,uint256,string,bytes32)": EventFragment;
    "ProvidedToken(address,uint256,uint256,string,uint256,string,bytes32)": EventFragment;
    "ProvidedUnPayablePoint(bytes32,uint256,uint256,string,uint256,string,bytes32)": EventFragment;
    "RemovedPhoneInfo(bytes32,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdrawn(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawnLiquidity(bytes32,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositedLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidedPoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidedUnPayablePoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedPhoneInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnLiquidity"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositedEventObject {
  account: string;
  depositedToken: BigNumber;
  depositedValue: BigNumber;
  balanceToken: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface DepositedLiquidityEventObject {
  tokenId: string;
  account: string;
  amount: BigNumber;
  liquidity: BigNumber;
}
export type DepositedLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositedLiquidityEventObject
>;

export type DepositedLiquidityEventFilter =
  TypedEventFilter<DepositedLiquidityEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProvidedPointEventObject {
  account: string;
  providedPoint: BigNumber;
  providedValue: BigNumber;
  currency: string;
  balancePoint: BigNumber;
  purchaseId: string;
  shopId: string;
}
export type ProvidedPointEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string, string],
  ProvidedPointEventObject
>;

export type ProvidedPointEventFilter = TypedEventFilter<ProvidedPointEvent>;

export interface ProvidedTokenEventObject {
  account: string;
  providedToken: BigNumber;
  providedValue: BigNumber;
  currency: string;
  balanceToken: BigNumber;
  purchaseId: string;
  shopId: string;
}
export type ProvidedTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string, string],
  ProvidedTokenEventObject
>;

export type ProvidedTokenEventFilter = TypedEventFilter<ProvidedTokenEvent>;

export interface ProvidedUnPayablePointEventObject {
  phone: string;
  providedPoint: BigNumber;
  providedValue: BigNumber;
  currency: string;
  balancePoint: BigNumber;
  purchaseId: string;
  shopId: string;
}
export type ProvidedUnPayablePointEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string, string],
  ProvidedUnPayablePointEventObject
>;

export type ProvidedUnPayablePointEventFilter =
  TypedEventFilter<ProvidedUnPayablePointEvent>;

export interface RemovedPhoneInfoEventObject {
  phone: string;
  account: string;
}
export type RemovedPhoneInfoEvent = TypedEvent<
  [string, string],
  RemovedPhoneInfoEventObject
>;

export type RemovedPhoneInfoEventFilter =
  TypedEventFilter<RemovedPhoneInfoEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawnEventObject {
  account: string;
  withdrawnToken: BigNumber;
  withdrawnValue: BigNumber;
  balanceToken: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnLiquidityEventObject {
  tokenId: string;
  account: string;
  amount: BigNumber;
  liquidity: BigNumber;
}
export type WithdrawnLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawnLiquidityEventObject
>;

export type WithdrawnLiquidityEventFilter =
  TypedEventFilter<WithdrawnLiquidityEvent>;

export interface Ledger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LedgerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_FEE(overrides?: CallOverrides): Promise<[number]>;

    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<[string]>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnerAddress(overrides?: CallOverrides): Promise<[string]>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumerAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangerAddress(overrides?: CallOverrides): Promise<[string]>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    foundationAccount(overrides?: CallOverrides): Promise<[string]>;

    getFee(overrides?: CallOverrides): Promise<[number]>;

    getFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    getFoundationAccount(overrides?: CallOverrides): Promise<[string]>;

    getLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSettlementAccount(overrides?: CallOverrides): Promise<[string]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      managements: Ledger.ManagementAddressesStruct,
      contracts: Ledger.ContractAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    providerAddress(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removePhoneInfo(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlementAccount(overrides?: CallOverrides): Promise<[string]>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    txFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_FEE(overrides?: CallOverrides): Promise<number>;

  addPointBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAddress(overrides?: CallOverrides): Promise<string>;

  burnPoint(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnUnPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnerAddress(overrides?: CallOverrides): Promise<string>;

  changeToLoyaltyToken(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeToPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumerAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositLiquidity(
    _tokenId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangerAddress(overrides?: CallOverrides): Promise<string>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  foundationAccount(overrides?: CallOverrides): Promise<string>;

  getFee(overrides?: CallOverrides): Promise<number>;

  getFeeAccount(overrides?: CallOverrides): Promise<string>;

  getFoundationAccount(overrides?: CallOverrides): Promise<string>;

  getLiquidity(
    _tokenId: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettlementAccount(overrides?: CallOverrides): Promise<string>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  getTxFeeAccount(overrides?: CallOverrides): Promise<string>;

  increaseNonce(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    managements: Ledger.ManagementAddressesStruct,
    contracts: Ledger.ContractAddressesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loyaltyTypeOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  nonceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pointBalanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  providePoint(
    _account: PromiseOrValue<string>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provideToken(
    _account: PromiseOrValue<string>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provideUnPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  providerAddress(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removePhoneInfo(
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlementAccount(overrides?: CallOverrides): Promise<string>;

  subPointBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subTokenBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenBalanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToken(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  txFeeAccount(overrides?: CallOverrides): Promise<string>;

  unPayablePointBalanceOf(
    _phone: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    _tokenId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_FEE(overrides?: CallOverrides): Promise<number>;

    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeAddress(overrides?: CallOverrides): Promise<string>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnerAddress(overrides?: CallOverrides): Promise<string>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    consumerAddress(overrides?: CallOverrides): Promise<string>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangerAddress(overrides?: CallOverrides): Promise<string>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    foundationAccount(overrides?: CallOverrides): Promise<string>;

    getFee(overrides?: CallOverrides): Promise<number>;

    getFeeAccount(overrides?: CallOverrides): Promise<string>;

    getFoundationAccount(overrides?: CallOverrides): Promise<string>;

    getLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementAccount(overrides?: CallOverrides): Promise<string>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<string>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      managements: Ledger.ManagementAddressesStruct,
      contracts: Ledger.ContractAddressesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    providerAddress(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removePhoneInfo(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementAccount(overrides?: CallOverrides): Promise<string>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    txFeeAccount(overrides?: CallOverrides): Promise<string>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Deposited(address,uint256,uint256,uint256)"(
      account?: null,
      depositedToken?: null,
      depositedValue?: null,
      balanceToken?: null
    ): DepositedEventFilter;
    Deposited(
      account?: null,
      depositedToken?: null,
      depositedValue?: null,
      balanceToken?: null
    ): DepositedEventFilter;

    "DepositedLiquidity(bytes32,address,uint256,uint256)"(
      tokenId?: null,
      account?: null,
      amount?: null,
      liquidity?: null
    ): DepositedLiquidityEventFilter;
    DepositedLiquidity(
      tokenId?: null,
      account?: null,
      amount?: null,
      liquidity?: null
    ): DepositedLiquidityEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProvidedPoint(address,uint256,uint256,string,uint256,string,bytes32)"(
      account?: null,
      providedPoint?: null,
      providedValue?: null,
      currency?: null,
      balancePoint?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedPointEventFilter;
    ProvidedPoint(
      account?: null,
      providedPoint?: null,
      providedValue?: null,
      currency?: null,
      balancePoint?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedPointEventFilter;

    "ProvidedToken(address,uint256,uint256,string,uint256,string,bytes32)"(
      account?: null,
      providedToken?: null,
      providedValue?: null,
      currency?: null,
      balanceToken?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedTokenEventFilter;
    ProvidedToken(
      account?: null,
      providedToken?: null,
      providedValue?: null,
      currency?: null,
      balanceToken?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedTokenEventFilter;

    "ProvidedUnPayablePoint(bytes32,uint256,uint256,string,uint256,string,bytes32)"(
      phone?: null,
      providedPoint?: null,
      providedValue?: null,
      currency?: null,
      balancePoint?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedUnPayablePointEventFilter;
    ProvidedUnPayablePoint(
      phone?: null,
      providedPoint?: null,
      providedValue?: null,
      currency?: null,
      balancePoint?: null,
      purchaseId?: null,
      shopId?: null
    ): ProvidedUnPayablePointEventFilter;

    "RemovedPhoneInfo(bytes32,address)"(
      phone?: null,
      account?: null
    ): RemovedPhoneInfoEventFilter;
    RemovedPhoneInfo(phone?: null, account?: null): RemovedPhoneInfoEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Withdrawn(address,uint256,uint256,uint256)"(
      account?: null,
      withdrawnToken?: null,
      withdrawnValue?: null,
      balanceToken?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: null,
      withdrawnToken?: null,
      withdrawnValue?: null,
      balanceToken?: null
    ): WithdrawnEventFilter;

    "WithdrawnLiquidity(bytes32,address,uint256,uint256)"(
      tokenId?: null,
      account?: null,
      amount?: null,
      liquidity?: null
    ): WithdrawnLiquidityEventFilter;
    WithdrawnLiquidity(
      tokenId?: null,
      account?: null,
      amount?: null,
      liquidity?: null
    ): WithdrawnLiquidityEventFilter;
  };

  estimateGas: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    foundationAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundationAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      managements: Ledger.ManagementAddressesStruct,
      contracts: Ledger.ContractAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    providerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removePhoneInfo(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlementAccount(overrides?: CallOverrides): Promise<BigNumber>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    txFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foundationAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFoundationAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      managements: Ledger.ManagementAddressesStruct,
      contracts: Ledger.ContractAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    providerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePhoneInfo(
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlementAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    txFeeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      _tokenId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
