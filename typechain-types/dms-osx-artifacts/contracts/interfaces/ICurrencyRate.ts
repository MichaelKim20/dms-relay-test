/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ICurrencyRateInterface extends utils.Interface {
  functions: {
    "convertCurrency(uint256,string,string)": FunctionFragment;
    "convertCurrencyToPoint(uint256,string)": FunctionFragment;
    "convertCurrencyToToken(uint256,string)": FunctionFragment;
    "convertPointToToken(uint256)": FunctionFragment;
    "convertTokenToPoint(uint256)": FunctionFragment;
    "get(string)": FunctionFragment;
    "multiple()": FunctionFragment;
    "set(string,uint256)": FunctionFragment;
    "support(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "convertCurrency"
      | "convertCurrencyToPoint"
      | "convertCurrencyToToken"
      | "convertPointToToken"
      | "convertTokenToPoint"
      | "get"
      | "multiple"
      | "set"
      | "support"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convertCurrency",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertCurrencyToPoint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertCurrencyToToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPointToToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTokenToPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "multiple", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "support",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "convertCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertCurrencyToPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertCurrencyToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPointToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertTokenToPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiple", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;

  events: {};
}

export interface ICurrencyRate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurrencyRateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    convertCurrency(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol1: PromiseOrValue<string>,
      _symbol2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertCurrencyToPoint(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertCurrencyToToken(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertPointToToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertTokenToPoint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multiple(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    support(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  convertCurrency(
    _amount: PromiseOrValue<BigNumberish>,
    _symbol1: PromiseOrValue<string>,
    _symbol2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertCurrencyToPoint(
    _amount: PromiseOrValue<BigNumberish>,
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertCurrencyToToken(
    _amount: PromiseOrValue<BigNumberish>,
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertPointToToken(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertTokenToPoint(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiple(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _symbol: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  support(
    _symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    convertCurrency(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol1: PromiseOrValue<string>,
      _symbol2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertCurrencyToPoint(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertCurrencyToToken(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertPointToToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTokenToPoint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiple(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    support(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    convertCurrency(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol1: PromiseOrValue<string>,
      _symbol2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertCurrencyToPoint(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertCurrencyToToken(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertPointToToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTokenToPoint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiple(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    support(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    convertCurrency(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol1: PromiseOrValue<string>,
      _symbol2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertCurrencyToPoint(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertCurrencyToToken(
      _amount: PromiseOrValue<BigNumberish>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertPointToToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertTokenToPoint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _symbol: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    support(
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
