/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IValidator {
  export type ValidatorDataStruct = {
    validator: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type ValidatorDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    validator: string;
    start: BigNumber;
    balance: BigNumber;
    status: number;
  };
}

export interface IValidatorInterface extends utils.Interface {
  functions: {
    "isActiveValidator(address)": FunctionFragment;
    "isCurrentActiveValidator(address)": FunctionFragment;
    "itemOf(uint256)": FunctionFragment;
    "itemsLength()": FunctionFragment;
    "lengthOfActiveValidator()": FunctionFragment;
    "lengthOfCurrentActiveValidator()": FunctionFragment;
    "validatorOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isActiveValidator"
      | "isCurrentActiveValidator"
      | "itemOf"
      | "itemsLength"
      | "lengthOfActiveValidator"
      | "lengthOfCurrentActiveValidator"
      | "validatorOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isActiveValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrentActiveValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lengthOfActiveValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lengthOfCurrentActiveValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrentActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lengthOfActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lengthOfCurrentActiveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCurrentActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    itemsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    lengthOfActiveValidator(overrides?: CallOverrides): Promise<[BigNumber]>;

    lengthOfCurrentActiveValidator(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IValidator.ValidatorDataStructOutput]>;
  };

  isActiveValidator(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCurrentActiveValidator(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  itemOf(
    _idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  itemsLength(overrides?: CallOverrides): Promise<BigNumber>;

  lengthOfActiveValidator(overrides?: CallOverrides): Promise<BigNumber>;

  lengthOfCurrentActiveValidator(overrides?: CallOverrides): Promise<BigNumber>;

  validatorOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IValidator.ValidatorDataStructOutput>;

  callStatic: {
    isActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCurrentActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    itemOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    itemsLength(overrides?: CallOverrides): Promise<BigNumber>;

    lengthOfActiveValidator(overrides?: CallOverrides): Promise<BigNumber>;

    lengthOfCurrentActiveValidator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IValidator.ValidatorDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    isActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCurrentActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemsLength(overrides?: CallOverrides): Promise<BigNumber>;

    lengthOfActiveValidator(overrides?: CallOverrides): Promise<BigNumber>;

    lengthOfCurrentActiveValidator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCurrentActiveValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lengthOfActiveValidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lengthOfCurrentActiveValidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
