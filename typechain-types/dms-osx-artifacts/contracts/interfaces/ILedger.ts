/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILedgerInterface extends utils.Interface {
  functions: {
    "addPointBalance(address,uint256)": FunctionFragment;
    "addTokenBalance(address,uint256)": FunctionFragment;
    "burnPoint(address,uint256)": FunctionFragment;
    "burnUnPayablePoint(bytes32,uint256)": FunctionFragment;
    "changeToLoyaltyToken(address)": FunctionFragment;
    "changeToPayablePoint(bytes32,address)": FunctionFragment;
    "getFee()": FunctionFragment;
    "getFeeAccount()": FunctionFragment;
    "getFoundationAccount()": FunctionFragment;
    "getSettlementAccount()": FunctionFragment;
    "getTokenAddress()": FunctionFragment;
    "getTxFeeAccount()": FunctionFragment;
    "increaseNonce(address)": FunctionFragment;
    "loyaltyTypeOf(address)": FunctionFragment;
    "nonceOf(address)": FunctionFragment;
    "pointBalanceOf(address)": FunctionFragment;
    "providePoint(address,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "provideToken(address,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "provideUnPayablePoint(bytes32,uint256,uint256,string,string,bytes32,address)": FunctionFragment;
    "setFee(uint32)": FunctionFragment;
    "subPointBalance(address,uint256)": FunctionFragment;
    "subTokenBalance(address,uint256)": FunctionFragment;
    "tokenBalanceOf(address)": FunctionFragment;
    "transferToken(address,address,uint256)": FunctionFragment;
    "unPayablePointBalanceOf(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPointBalance"
      | "addTokenBalance"
      | "burnPoint"
      | "burnUnPayablePoint"
      | "changeToLoyaltyToken"
      | "changeToPayablePoint"
      | "getFee"
      | "getFeeAccount"
      | "getFoundationAccount"
      | "getSettlementAccount"
      | "getTokenAddress"
      | "getTxFeeAccount"
      | "increaseNonce"
      | "loyaltyTypeOf"
      | "nonceOf"
      | "pointBalanceOf"
      | "providePoint"
      | "provideToken"
      | "provideUnPayablePoint"
      | "setFee"
      | "subPointBalance"
      | "subTokenBalance"
      | "tokenBalanceOf"
      | "transferToken"
      | "unPayablePointBalanceOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPointBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPoint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnUnPayablePoint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeToLoyaltyToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeToPayablePoint",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFoundationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTxFeeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyTypeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pointBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "providePoint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provideToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provideUnPayablePoint",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subPointBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unPayablePointBalanceOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPointBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnUnPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeToLoyaltyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeToPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFoundationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTxFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyTypeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideUnPayablePoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subPointBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPayablePointBalanceOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILedger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILedgerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFee(overrides?: CallOverrides): Promise<[number]>;

    getFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    getFoundationAccount(overrides?: CallOverrides): Promise<[string]>;

    getSettlementAccount(overrides?: CallOverrides): Promise<[string]>;

    getTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<[string]>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addPointBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnPoint(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnUnPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeToLoyaltyToken(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeToPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFee(overrides?: CallOverrides): Promise<number>;

  getFeeAccount(overrides?: CallOverrides): Promise<string>;

  getFoundationAccount(overrides?: CallOverrides): Promise<string>;

  getSettlementAccount(overrides?: CallOverrides): Promise<string>;

  getTokenAddress(overrides?: CallOverrides): Promise<string>;

  getTxFeeAccount(overrides?: CallOverrides): Promise<string>;

  increaseNonce(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loyaltyTypeOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  nonceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pointBalanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  providePoint(
    _account: PromiseOrValue<string>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provideToken(
    _account: PromiseOrValue<string>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provideUnPayablePoint(
    _phone: PromiseOrValue<BytesLike>,
    _loyaltyPoint: PromiseOrValue<BigNumberish>,
    _loyaltyValue: PromiseOrValue<BigNumberish>,
    _currency: PromiseOrValue<string>,
    _purchaseId: PromiseOrValue<string>,
    _shopId: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subPointBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subTokenBalance(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenBalanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferToken(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unPayablePointBalanceOf(
    _phone: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(overrides?: CallOverrides): Promise<number>;

    getFeeAccount(overrides?: CallOverrides): Promise<string>;

    getFoundationAccount(overrides?: CallOverrides): Promise<string>;

    getSettlementAccount(overrides?: CallOverrides): Promise<string>;

    getTokenAddress(overrides?: CallOverrides): Promise<string>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<string>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getFoundationAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnPoint(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeToLoyaltyToken(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeToPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFoundationAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTxFeeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseNonce(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loyaltyTypeOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pointBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providePoint(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provideToken(
      _account: PromiseOrValue<string>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provideUnPayablePoint(
      _phone: PromiseOrValue<BytesLike>,
      _loyaltyPoint: PromiseOrValue<BigNumberish>,
      _loyaltyValue: PromiseOrValue<BigNumberish>,
      _currency: PromiseOrValue<string>,
      _purchaseId: PromiseOrValue<string>,
      _shopId: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subPointBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subTokenBalance(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenBalanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToken(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unPayablePointBalanceOf(
      _phone: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
