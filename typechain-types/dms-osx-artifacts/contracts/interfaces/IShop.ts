/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IShop {
  export type WithdrawDataStruct = {
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawDataStructOutput = [BigNumber, BigNumber, number] & {
    id: BigNumber;
    amount: BigNumber;
    status: number;
  };

  export type ShopDataStruct = {
    shopId: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    delegator: PromiseOrValue<string>;
    providedAmount: PromiseOrValue<BigNumberish>;
    usedAmount: PromiseOrValue<BigNumberish>;
    settledAmount: PromiseOrValue<BigNumberish>;
    withdrawnAmount: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    withdrawData: IShop.WithdrawDataStruct;
    itemIndex: PromiseOrValue<BigNumberish>;
    accountIndex: PromiseOrValue<BigNumberish>;
  };

  export type ShopDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    IShop.WithdrawDataStructOutput,
    BigNumber,
    BigNumber
  ] & {
    shopId: string;
    name: string;
    currency: string;
    account: string;
    delegator: string;
    providedAmount: BigNumber;
    usedAmount: BigNumber;
    settledAmount: BigNumber;
    withdrawnAmount: BigNumber;
    status: number;
    withdrawData: IShop.WithdrawDataStructOutput;
    itemIndex: BigNumber;
    accountIndex: BigNumber;
  };
}

export interface IShopInterface extends utils.Interface {
  functions: {
    "addProvidedAmount(bytes32,uint256,string)": FunctionFragment;
    "addSettledAmount(bytes32,uint256,string)": FunctionFragment;
    "addUsedAmount(bytes32,uint256,string,bytes32)": FunctionFragment;
    "getSettlementAmount(bytes32)": FunctionFragment;
    "getShopsCountOfAccount(address)": FunctionFragment;
    "getShopsOfAccount(address,uint256,uint256)": FunctionFragment;
    "isAvailableId(bytes32)": FunctionFragment;
    "nonceOf(address)": FunctionFragment;
    "shopOf(bytes32)": FunctionFragment;
    "subUsedAmount(bytes32,uint256,string,bytes32)": FunctionFragment;
    "withdrawableOf(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProvidedAmount"
      | "addSettledAmount"
      | "addUsedAmount"
      | "getSettlementAmount"
      | "getShopsCountOfAccount"
      | "getShopsOfAccount"
      | "isAvailableId"
      | "nonceOf"
      | "shopOf"
      | "subUsedAmount"
      | "withdrawableOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProvidedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSettledAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUsedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShopsCountOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShopsOfAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailableId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shopOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "subUsedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProvidedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSettledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUsedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShopsCountOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShopsOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailableId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shopOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subUsedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShopsCountOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShopsOfAccount(
      _account: PromiseOrValue<string>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IShop.ShopDataStructOutput]>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addProvidedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSettledAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUsedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSettlementAmount(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShopsCountOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShopsOfAccount(
    _account: PromiseOrValue<string>,
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isAvailableId(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shopOf(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IShop.ShopDataStructOutput>;

  subUsedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableOf(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShopsCountOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShopsOfAccount(
      _account: PromiseOrValue<string>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IShop.ShopDataStructOutput>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShopsCountOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShopsOfAccount(
      _account: PromiseOrValue<string>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShopsCountOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShopsOfAccount(
      _account: PromiseOrValue<string>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
