/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LoyaltyConsumerStorage {
  export type LoyaltyPaymentDataStruct = {
    paymentId: PromiseOrValue<BytesLike>;
    purchaseId: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    shopId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    loyaltyType: PromiseOrValue<BigNumberish>;
    paidPoint: PromiseOrValue<BigNumberish>;
    paidToken: PromiseOrValue<BigNumberish>;
    paidValue: PromiseOrValue<BigNumberish>;
    feePoint: PromiseOrValue<BigNumberish>;
    feeToken: PromiseOrValue<BigNumberish>;
    feeValue: PromiseOrValue<BigNumberish>;
    usedValueShop: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type LoyaltyPaymentDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    paymentId: string;
    purchaseId: string;
    currency: string;
    shopId: string;
    account: string;
    timestamp: BigNumber;
    loyaltyType: number;
    paidPoint: BigNumber;
    paidToken: BigNumber;
    paidValue: BigNumber;
    feePoint: BigNumber;
    feeToken: BigNumber;
    feeValue: BigNumber;
    usedValueShop: BigNumber;
    status: number;
  };
}

export declare namespace LoyaltyConsumer {
  export type LoyaltyPaymentInputDataStruct = {
    paymentId: PromiseOrValue<BytesLike>;
    purchaseId: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
    shopId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type LoyaltyPaymentInputDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    paymentId: string;
    purchaseId: string;
    amount: BigNumber;
    currency: string;
    shopId: string;
    account: string;
    signature: string;
  };
}

export interface LoyaltyConsumerInterface extends utils.Interface {
  functions: {
    "closeCancelLoyaltyPayment(bytes32,bool)": FunctionFragment;
    "closeNewLoyaltyPayment(bytes32,bool)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isAvailablePaymentId(bytes32)": FunctionFragment;
    "loyaltyPaymentOf(bytes32)": FunctionFragment;
    "openCancelLoyaltyPayment(bytes32,bytes)": FunctionFragment;
    "openNewLoyaltyPayment((bytes32,string,uint256,string,bytes32,address,bytes))": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLedger(address)": FunctionFragment;
    "setShop(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "closeCancelLoyaltyPayment"
      | "closeNewLoyaltyPayment"
      | "initialize"
      | "isAvailablePaymentId"
      | "loyaltyPaymentOf"
      | "openCancelLoyaltyPayment"
      | "openNewLoyaltyPayment"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setLedger"
      | "setShop"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "closeCancelLoyaltyPayment",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeNewLoyaltyPayment",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailablePaymentId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "loyaltyPaymentOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "openCancelLoyaltyPayment",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "openNewLoyaltyPayment",
    values: [LoyaltyConsumer.LoyaltyPaymentInputDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLedger",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShop",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeCancelLoyaltyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeNewLoyaltyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailablePaymentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loyaltyPaymentOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openCancelLoyaltyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openNewLoyaltyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLedger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LoyaltyPaymentEvent(tuple,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProvidedTokenForSettlement(address,bytes32,uint256,uint256,uint256,string,uint256,string)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoyaltyPaymentEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidedTokenForSettlement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LoyaltyPaymentEventEventObject {
  payment: LoyaltyConsumerStorage.LoyaltyPaymentDataStructOutput;
  balance: BigNumber;
}
export type LoyaltyPaymentEventEvent = TypedEvent<
  [LoyaltyConsumerStorage.LoyaltyPaymentDataStructOutput, BigNumber],
  LoyaltyPaymentEventEventObject
>;

export type LoyaltyPaymentEventEventFilter =
  TypedEventFilter<LoyaltyPaymentEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProvidedTokenForSettlementEventObject {
  account: string;
  shopId: string;
  providedPoint: BigNumber;
  providedToken: BigNumber;
  providedValue: BigNumber;
  currency: string;
  balanceToken: BigNumber;
  purchaseId: string;
}
export type ProvidedTokenForSettlementEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber, string],
  ProvidedTokenForSettlementEventObject
>;

export type ProvidedTokenForSettlementEventFilter =
  TypedEventFilter<ProvidedTokenForSettlementEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface LoyaltyConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoyaltyConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    closeCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeNewLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _certifierAddress: PromiseOrValue<string>,
      _currencyRateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAvailablePaymentId(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    loyaltyPaymentOf(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[LoyaltyConsumerStorage.LoyaltyPaymentDataStructOutput]>;

    openCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openNewLoyaltyPayment(
      data: LoyaltyConsumer.LoyaltyPaymentInputDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLedger(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShop(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  closeCancelLoyaltyPayment(
    _paymentId: PromiseOrValue<BytesLike>,
    _confirm: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeNewLoyaltyPayment(
    _paymentId: PromiseOrValue<BytesLike>,
    _confirm: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _certifierAddress: PromiseOrValue<string>,
    _currencyRateAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAvailablePaymentId(
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  loyaltyPaymentOf(
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<LoyaltyConsumerStorage.LoyaltyPaymentDataStructOutput>;

  openCancelLoyaltyPayment(
    _paymentId: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openNewLoyaltyPayment(
    data: LoyaltyConsumer.LoyaltyPaymentInputDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLedger(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShop(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeNewLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _certifierAddress: PromiseOrValue<string>,
      _currencyRateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAvailablePaymentId(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    loyaltyPaymentOf(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<LoyaltyConsumerStorage.LoyaltyPaymentDataStructOutput>;

    openCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    openNewLoyaltyPayment(
      data: LoyaltyConsumer.LoyaltyPaymentInputDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLedger(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShop(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LoyaltyPaymentEvent(tuple,uint256)"(
      payment?: null,
      balance?: null
    ): LoyaltyPaymentEventEventFilter;
    LoyaltyPaymentEvent(
      payment?: null,
      balance?: null
    ): LoyaltyPaymentEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProvidedTokenForSettlement(address,bytes32,uint256,uint256,uint256,string,uint256,string)"(
      account?: null,
      shopId?: null,
      providedPoint?: null,
      providedToken?: null,
      providedValue?: null,
      currency?: null,
      balanceToken?: null,
      purchaseId?: null
    ): ProvidedTokenForSettlementEventFilter;
    ProvidedTokenForSettlement(
      account?: null,
      shopId?: null,
      providedPoint?: null,
      providedToken?: null,
      providedValue?: null,
      currency?: null,
      balanceToken?: null,
      purchaseId?: null
    ): ProvidedTokenForSettlementEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    closeCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeNewLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _certifierAddress: PromiseOrValue<string>,
      _currencyRateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAvailablePaymentId(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loyaltyPaymentOf(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openNewLoyaltyPayment(
      data: LoyaltyConsumer.LoyaltyPaymentInputDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLedger(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShop(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeNewLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _confirm: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _certifierAddress: PromiseOrValue<string>,
      _currencyRateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAvailablePaymentId(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loyaltyPaymentOf(
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openCancelLoyaltyPayment(
      _paymentId: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openNewLoyaltyPayment(
      data: LoyaltyConsumer.LoyaltyPaymentInputDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLedger(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShop(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
