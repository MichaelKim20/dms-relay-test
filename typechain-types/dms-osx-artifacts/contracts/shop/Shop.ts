/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IShop {
  export type WithdrawDataStruct = {
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawDataStructOutput = [BigNumber, BigNumber, number] & {
    id: BigNumber;
    amount: BigNumber;
    status: number;
  };

  export type ShopDataStruct = {
    shopId: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    providedAmount: PromiseOrValue<BigNumberish>;
    usedAmount: PromiseOrValue<BigNumberish>;
    settledAmount: PromiseOrValue<BigNumberish>;
    withdrawnAmount: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    withdrawData: IShop.WithdrawDataStruct;
    itemIndex: PromiseOrValue<BigNumberish>;
    accountIndex: PromiseOrValue<BigNumberish>;
  };

  export type ShopDataStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    IShop.WithdrawDataStructOutput,
    BigNumber,
    BigNumber
  ] & {
    shopId: string;
    name: string;
    currency: string;
    account: string;
    providedAmount: BigNumber;
    usedAmount: BigNumber;
    settledAmount: BigNumber;
    withdrawnAmount: BigNumber;
    status: number;
    withdrawData: IShop.WithdrawDataStructOutput;
    itemIndex: BigNumber;
    accountIndex: BigNumber;
  };
}

export interface ShopInterface extends utils.Interface {
  functions: {
    "add(bytes32,string,string,address,bytes)": FunctionFragment;
    "addProvidedAmount(bytes32,uint256,string)": FunctionFragment;
    "addSettledAmount(bytes32,uint256,string)": FunctionFragment;
    "addUsedAmount(bytes32,uint256,string,bytes32)": FunctionFragment;
    "changeStatus(bytes32,uint8,address,bytes)": FunctionFragment;
    "closeWithdrawal(bytes32,address,bytes)": FunctionFragment;
    "consumerAddress()": FunctionFragment;
    "getSettlementAmount(bytes32)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isAvailableId(bytes32)": FunctionFragment;
    "nonceOf(address)": FunctionFragment;
    "openWithdrawal(bytes32,uint256,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "providerAddress()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shopIdOf(uint256)": FunctionFragment;
    "shopOf(bytes32)": FunctionFragment;
    "shopsLength()": FunctionFragment;
    "shopsOf(address)": FunctionFragment;
    "subUsedAmount(bytes32,uint256,string,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(bytes32,string,string,address,bytes)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawableOf(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "addProvidedAmount"
      | "addSettledAmount"
      | "addUsedAmount"
      | "changeStatus"
      | "closeWithdrawal"
      | "consumerAddress"
      | "getSettlementAmount"
      | "initialize"
      | "isAvailableId"
      | "nonceOf"
      | "openWithdrawal"
      | "owner"
      | "providerAddress"
      | "proxiableUUID"
      | "renounceOwnership"
      | "shopIdOf"
      | "shopOf"
      | "shopsLength"
      | "shopsOf"
      | "subUsedAmount"
      | "transferOwnership"
      | "update"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawableOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addProvidedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSettledAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUsedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStatus",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closeWithdrawal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "consumerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailableId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openWithdrawal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "providerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shopIdOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shopOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "shopsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shopsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subUsedAmount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addProvidedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSettledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUsedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailableId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shopIdOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shopOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shopsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shopsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subUsedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableOf",
    data: BytesLike
  ): Result;

  events: {
    "AddedShop(bytes32,string,string,address,uint8)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ChangedShopStatus(bytes32,uint8)": EventFragment;
    "ClosedWithdrawal(bytes32,uint256,uint256,string,address,uint256)": EventFragment;
    "DecreasedUsedAmount(bytes32,uint256,uint256,string,string,bytes32)": EventFragment;
    "IncreasedProvidedAmount(bytes32,uint256,uint256,string,string)": EventFragment;
    "IncreasedSettledAmount(bytes32,uint256,uint256,string,string)": EventFragment;
    "IncreasedUsedAmount(bytes32,uint256,uint256,string,string,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OpenedWithdrawal(bytes32,uint256,string,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedShop(bytes32,string,string,address,uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedShopStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasedUsedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasedProvidedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasedSettledAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasedUsedAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenedWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AddedShopEventObject {
  shopId: string;
  name: string;
  currency: string;
  account: string;
  status: number;
}
export type AddedShopEvent = TypedEvent<
  [string, string, string, string, number],
  AddedShopEventObject
>;

export type AddedShopEventFilter = TypedEventFilter<AddedShopEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ChangedShopStatusEventObject {
  shopId: string;
  status: number;
}
export type ChangedShopStatusEvent = TypedEvent<
  [string, number],
  ChangedShopStatusEventObject
>;

export type ChangedShopStatusEventFilter =
  TypedEventFilter<ChangedShopStatusEvent>;

export interface ClosedWithdrawalEventObject {
  shopId: string;
  amount: BigNumber;
  total: BigNumber;
  currency: string;
  account: string;
  withdrawId: BigNumber;
}
export type ClosedWithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber],
  ClosedWithdrawalEventObject
>;

export type ClosedWithdrawalEventFilter =
  TypedEventFilter<ClosedWithdrawalEvent>;

export interface DecreasedUsedAmountEventObject {
  shopId: string;
  increase: BigNumber;
  total: BigNumber;
  currency: string;
  purchaseId: string;
  paymentId: string;
}
export type DecreasedUsedAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string],
  DecreasedUsedAmountEventObject
>;

export type DecreasedUsedAmountEventFilter =
  TypedEventFilter<DecreasedUsedAmountEvent>;

export interface IncreasedProvidedAmountEventObject {
  shopId: string;
  increase: BigNumber;
  total: BigNumber;
  currency: string;
  purchaseId: string;
}
export type IncreasedProvidedAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  IncreasedProvidedAmountEventObject
>;

export type IncreasedProvidedAmountEventFilter =
  TypedEventFilter<IncreasedProvidedAmountEvent>;

export interface IncreasedSettledAmountEventObject {
  shopId: string;
  increase: BigNumber;
  total: BigNumber;
  currency: string;
  purchaseId: string;
}
export type IncreasedSettledAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  IncreasedSettledAmountEventObject
>;

export type IncreasedSettledAmountEventFilter =
  TypedEventFilter<IncreasedSettledAmountEvent>;

export interface IncreasedUsedAmountEventObject {
  shopId: string;
  increase: BigNumber;
  total: BigNumber;
  currency: string;
  purchaseId: string;
  paymentId: string;
}
export type IncreasedUsedAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string],
  IncreasedUsedAmountEventObject
>;

export type IncreasedUsedAmountEventFilter =
  TypedEventFilter<IncreasedUsedAmountEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OpenedWithdrawalEventObject {
  shopId: string;
  amount: BigNumber;
  currency: string;
  account: string;
  withdrawId: BigNumber;
}
export type OpenedWithdrawalEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  OpenedWithdrawalEventObject
>;

export type OpenedWithdrawalEventFilter =
  TypedEventFilter<OpenedWithdrawalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdatedShopEventObject {
  shopId: string;
  name: string;
  currency: string;
  account: string;
  status: number;
}
export type UpdatedShopEvent = TypedEvent<
  [string, string, string, string, number],
  UpdatedShopEventObject
>;

export type UpdatedShopEventFilter = TypedEventFilter<UpdatedShopEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Shop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStatus(
      _shopId: PromiseOrValue<BytesLike>,
      _status: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consumerAddress(overrides?: CallOverrides): Promise<[string]>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _certifier: PromiseOrValue<string>,
      _currencyRate: PromiseOrValue<string>,
      _providerAddress: PromiseOrValue<string>,
      _consumerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    providerAddress(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shopIdOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IShop.ShopDataStructOutput]>;

    shopsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    shopsOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  add(
    _shopId: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _currency: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProvidedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSettledAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUsedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStatus(
    _shopId: PromiseOrValue<BytesLike>,
    _status: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeWithdrawal(
    _shopId: PromiseOrValue<BytesLike>,
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consumerAddress(overrides?: CallOverrides): Promise<string>;

  getSettlementAmount(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _certifier: PromiseOrValue<string>,
    _currencyRate: PromiseOrValue<string>,
    _providerAddress: PromiseOrValue<string>,
    _consumerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAvailableId(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openWithdrawal(
    _shopId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  providerAddress(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shopIdOf(
    _idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  shopOf(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IShop.ShopDataStructOutput>;

  shopsLength(overrides?: CallOverrides): Promise<BigNumber>;

  shopsOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  subUsedAmount(
    _shopId: PromiseOrValue<BytesLike>,
    _value: PromiseOrValue<BigNumberish>,
    _purchaseId: PromiseOrValue<string>,
    _paymentId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    _shopId: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _currency: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableOf(
    _shopId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    add(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStatus(
      _shopId: PromiseOrValue<BytesLike>,
      _status: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    consumerAddress(overrides?: CallOverrides): Promise<string>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _certifier: PromiseOrValue<string>,
      _currencyRate: PromiseOrValue<string>,
      _providerAddress: PromiseOrValue<string>,
      _consumerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    providerAddress(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    shopIdOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IShop.ShopDataStructOutput>;

    shopsLength(overrides?: CallOverrides): Promise<BigNumber>;

    shopsOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddedShop(bytes32,string,string,address,uint8)"(
      shopId?: null,
      name?: null,
      currency?: null,
      account?: null,
      status?: null
    ): AddedShopEventFilter;
    AddedShop(
      shopId?: null,
      name?: null,
      currency?: null,
      account?: null,
      status?: null
    ): AddedShopEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ChangedShopStatus(bytes32,uint8)"(
      shopId?: null,
      status?: null
    ): ChangedShopStatusEventFilter;
    ChangedShopStatus(
      shopId?: null,
      status?: null
    ): ChangedShopStatusEventFilter;

    "ClosedWithdrawal(bytes32,uint256,uint256,string,address,uint256)"(
      shopId?: null,
      amount?: null,
      total?: null,
      currency?: null,
      account?: null,
      withdrawId?: null
    ): ClosedWithdrawalEventFilter;
    ClosedWithdrawal(
      shopId?: null,
      amount?: null,
      total?: null,
      currency?: null,
      account?: null,
      withdrawId?: null
    ): ClosedWithdrawalEventFilter;

    "DecreasedUsedAmount(bytes32,uint256,uint256,string,string,bytes32)"(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null,
      paymentId?: null
    ): DecreasedUsedAmountEventFilter;
    DecreasedUsedAmount(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null,
      paymentId?: null
    ): DecreasedUsedAmountEventFilter;

    "IncreasedProvidedAmount(bytes32,uint256,uint256,string,string)"(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null
    ): IncreasedProvidedAmountEventFilter;
    IncreasedProvidedAmount(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null
    ): IncreasedProvidedAmountEventFilter;

    "IncreasedSettledAmount(bytes32,uint256,uint256,string,string)"(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null
    ): IncreasedSettledAmountEventFilter;
    IncreasedSettledAmount(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null
    ): IncreasedSettledAmountEventFilter;

    "IncreasedUsedAmount(bytes32,uint256,uint256,string,string,bytes32)"(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null,
      paymentId?: null
    ): IncreasedUsedAmountEventFilter;
    IncreasedUsedAmount(
      shopId?: null,
      increase?: null,
      total?: null,
      currency?: null,
      purchaseId?: null,
      paymentId?: null
    ): IncreasedUsedAmountEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OpenedWithdrawal(bytes32,uint256,string,address,uint256)"(
      shopId?: null,
      amount?: null,
      currency?: null,
      account?: null,
      withdrawId?: null
    ): OpenedWithdrawalEventFilter;
    OpenedWithdrawal(
      shopId?: null,
      amount?: null,
      currency?: null,
      account?: null,
      withdrawId?: null
    ): OpenedWithdrawalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdatedShop(bytes32,string,string,address,uint8)"(
      shopId?: null,
      name?: null,
      currency?: null,
      account?: null,
      status?: null
    ): UpdatedShopEventFilter;
    UpdatedShop(
      shopId?: null,
      name?: null,
      currency?: null,
      account?: null,
      status?: null
    ): UpdatedShopEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    add(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStatus(
      _shopId: PromiseOrValue<BytesLike>,
      _status: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consumerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _certifier: PromiseOrValue<string>,
      _currencyRate: PromiseOrValue<string>,
      _providerAddress: PromiseOrValue<string>,
      _consumerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    providerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shopIdOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopsLength(overrides?: CallOverrides): Promise<BigNumber>;

    shopsOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProvidedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSettledAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStatus(
      _shopId: PromiseOrValue<BytesLike>,
      _status: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consumerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementAmount(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _certifier: PromiseOrValue<string>,
      _currencyRate: PromiseOrValue<string>,
      _providerAddress: PromiseOrValue<string>,
      _consumerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAvailableId(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openWithdrawal(
      _shopId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shopIdOf(
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shopsOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subUsedAmount(
      _shopId: PromiseOrValue<BytesLike>,
      _value: PromiseOrValue<BigNumberish>,
      _purchaseId: PromiseOrValue<string>,
      _paymentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      _shopId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _currency: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableOf(
      _shopId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
